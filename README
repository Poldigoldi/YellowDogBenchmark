BENCHMARK APP

This application runs a benchmark test on CentOS VMs, which are indented to represent cloud instances.
The VMs launch agents upon startup to communicate with the YellowDog platform.
As of now the configuration only works over a local network.
The benchmark is run via vray-benchmarking:
https://www.chaosgroup.com/vray/benchmark

Instructions:

Import and Create the VMs:

1. Download and install VirtualBox
2. Download the CentOS_VM.ova file from here:
https://drive.google.com/file/d/1IWUMiY6x0ZODrWDR1VnpZj_IAa6_jexF/view?usp=sharing
3. Open VirtualBox and go to File >> Import Appliance...
4. Select CentOS_VM.ova
5. Click 'Import'
Once finished you can start the VM.
6. Configure the network as explained here:
https://www.tecmint.com/network-between-guest-vm-and-host-virtualbox/
7. Update the schema url to use your network IP in /opt/agent/application.yaml


You can now run the benchmark app by following these steps:

	1. Start Platform
		a. Navigate to platform folder and execute "docker-compose up"
	2. Start VMs
		a. Headlessly start the VM
		    The agent service should automatically start but if it doesn't, you can manually run the agent.jar file
		    which is located in /opt/agent/
		b. Wait for platform to register the worker
	3. Run Benchmark app
		a. Ensure the numOfAgents in benchmark.java class matches the number of running VMs.
		b. Run application
	4. Once finished, the report.txt can be found in the benchmark app root folder.


If you want to add more VMs with agents you need to do the following:

	1. Import VM as explained above.
	2. Ensure to change the static IP address for the VM as explained in
	https://www.tecmint.com/network-between-guest-vm-and-host-virtualbox/
	3. SSH into VM root@NEW_IP_ADDRESS with password "yellowdog"
	4. Execute "sudo vi /opt/agent/application.yaml"
	5. Increment instance-type, save and exit.
	6. Reboot
    7. Match numOfAgents in benchmark.java






ADDITIONAL INFORMATION:


Setup of VM:

To setup the virtual machine CentOS was chosen. Reason for this is that vray-benchmark suggests using this OS.
The minimal ISO was downloaded as desktop usage is not necessary. The agent folder was added to the VM via the
ssh scp command and stored under /opt/
The application.yaml needed the following changes to work on the VM:
    - A tasktype called "benchmark" was added
    - A runcommand file called "benchmark.sh" was added with the following content
        eval /opt/vray-benchmark-4.10.06 --mode vray --quiet -o /opt/agent/workers/1/bm_output_${INSTANCE}.json
    - The environment variable is created with the task groups and set when the work requirement is submitted.
    - As of now the first worker path is hard coded (however the benchmarking system should only ever run one worker)
    - Changed the schema-default-url to http://192.168.99.1 (or whatever your local network IP address is)
    - Need to imcrement the instance-type id for each VM, starting with 0.


BenchmarkController:

A for loop creates a task group based on the number of agent set above. The iteration 'i' aligns with the instance
type and therefore it is important that the instance type for each agent is set in the application.yaml.
The instance value is passed to the agent using an environment variable. This variable is mainly used to
distinguish the output files created by vray-benchmark. Once the test has finished the json output files are
uploaded to the object store. If the size of the uploaded files is greater than 0 (ie something was uploaded
successfully) then the program creates a summary report of the benchmark data.
This is done in the createReport() method. All files with the filename pattern bm_output_*.json are
downloaded and subsequently compiled into a readable report summary, which in turn is exported as report.txt in
the root directory.

Example of a Benchmark Summary Report of two instances:


Benchmark report from 2019-06-20 10:56:04.935

Filename             cpuScore   OS                             CPUs
-----------------------------------------------------------------------------------------------------------------
bm_output_0.json     [51]       Linux 3.10.0-957.el7.x86_64    [Intel(R) Core(TM) i7-3520M CPU @ 2.90GHz : 1]
bm_output_1.json     [55]       Linux 3.10.0-957.el7.x86_64    [Intel(R) Core(TM) i7-3520M CPU @ 2.90GHz : 1]

